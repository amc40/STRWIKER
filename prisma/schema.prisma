generator client {
  provider = "prisma-client-js"
}

datasource db {
  // NOTE: we use raw queries which rely on postgres sql syntax. Those will have to be refactored if we change provider
  provider  = "postgresql"
  // NOTE: if you are getting slow responses it may be worth upping the conection limit to see if it has some effect
  // (e.g. adding &connection_limit=5 to the POSTGRES_PRISMA_URL)
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Player {
  id                             Int                     @id @default(autoincrement())
  name                           String                  @unique
  playerPoints                   PlayerPoint[]
  // Stats !!!
  // If you think there is a chance players may want to view a history of the stat value then add a field to the HistoricalPlayerStats table
  elo                            Int                     @default(1200)
  gamesPlayed                    Int                     @default(0)
  historicalPlayerStatsForPlayer HistoricalPlayerStats[]
}

model Game {
  id                            Int                     @id @default(autoincrement())
  startTime                     DateTime                @default(now())
  endTime                       DateTime?
  currentPoint                  Point?                  @relation(name: "currentPoint", fields: [currentPointId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  currentPointId                Int?                    @unique
  completed                     Boolean                 @default(false)
  abandoned                     Boolean                 @default(false)
  finalScoreRed                 Int?
  finalScoreBlue                Int?
  points                        Point[]                 @relation(name: "pointGame")
  rotatyRed                     RotatyStrategy
  rotatyBlue                    RotatyStrategy
  historicalPlayerStatsFromGame HistoricalPlayerStats[]

  @@index([startTime])
  @@index([completed, abandoned])
}

enum RotatyStrategy {
  Never
  OnConcede
  Always
}

model Point {
  id                 Int           @id @default(autoincrement())
  game               Game          @relation(name: "pointGame", fields: [gameId], references: [id])
  playerPoints       PlayerPoint[]
  currentRedScore    Int           @default(0)
  currentBlueScore   Int           @default(0)
  startTime          DateTime?     @default(now())
  endTime            DateTime?
  gameId             Int
  gameIfCurrentPoint Game?         @relation("currentPoint")

  @@index([gameId])
  @@index([gameId, startTime])
}

enum Team {
  Red
  Blue
}

model PlayerPoint {
  id       Int    @id @default(autoincrement())
  player   Player @relation(fields: [playerId], references: [id])
  point    Point  @relation(fields: [pointId], references: [id])
  position Int // 0 is against the wall
  // Red || Blue
  team     Team

  scoredGoal  Boolean @default(false)
  ownGoal     Boolean @default(false)
  rattled     Boolean @default(false)
  skipped     Boolean @default(false)
  is_striker  Boolean @default(false)
  is_defender Boolean @default(false)

  playerId Int
  pointId  Int

  @@unique([playerId, pointId])
  @@index([playerId])
  @@index([pointId])
}

model HistoricalPlayerStats {
  id          Int @id @default(autoincrement())
  // each of the stats should be non-nullable or it will cause a problem in historicalPlayerStatsRepository.getMostRecentHistoricalPlayerStatsBeforeThreshold()
  gamesPlayed Int
  elo         Int

  game   Game @relation(fields: [gameId], references: [id])
  gameId Int

  player   Player @relation(fields: [playerId], references: [id])
  playerId Int

  @@index([playerId])
}
